---
version: '1.0'
description: Create VPC with boto3action
input:
  - cidr_block
  - region
  - subnet_cidr_block
  - availability_zone
tasks:
  create_vpc:
    action: aws_boto3.boto3action
    input:
      service: ec2
      action_name: create_vpc
      region: <% ctx().region %>
      params: <% dict(CidrBlock => ctx().cidr_block, InstanceTenancy => "default") %>
    next:
      - when: '{{ succeeded() }}'
        publish:
          - vpc_id: <% result().result.Vpc.VpcId %>
        do:
          - create_subnet
          - create_igw
  create_subnet:
    action: aws_boto3.boto3action
    input:
      service: ec2
      action_name: create_subnet
      region: <% ctx().region %>
      params: <% dict(AvailabilityZone => ctx().availability_zone, CidrBlock => ctx().subnet_cidr_block, VpcId => ctx().vpc_id) %>
    next:
      - when: '{{ succeeded() }}'
        publish:
          - subnet_id: <% result().result.Subnet.SubnetId %>
        do:
          - create_route_table
  create_igw:
    action: aws_boto3.boto3action
    input:
      service: ec2
      action_name: create_internet_gateway
      region: <% ctx().region %>
    next:
      - when: '{{ succeeded() }}'
        publish:
          - igw_id: <% result().result.InternetGateway.InternetGatewayId %>
        do:
          - attach_igw
  attach_igw:
    action: aws_boto3.boto3action
    input:
      service: ec2
      action_name: attach_internet_gateway
      region: <% ctx().region %>
      params: <% dict(VpcId => ctx().vpc_id, InternetGatewayId => ctx().igw_id) %>
    next:
      - when: '{{ succeeded() }}'
        do:
          - create_route_igw
  create_route_table:
    action: aws_boto3.boto3action
    input:
      service: ec2
      action_name: create_route_table
      region: <% ctx().region %>
      params: <% dict(VpcId => ctx().vpc_id) %>
    next:
      - when: '{{ succeeded() }}'
        publish:
          - route_table_id: <% result().result.RouteTable.RouteTableId %>
        do:
          - attach_route_tables
  attach_route_tables:
    action: aws_boto3.boto3action
    input:
      service: ec2
      action_name: associate_route_table
      region: <% ctx().region %>
      params: <% dict(SubnetId => ctx().subnet_id, RouteTableId => ctx().route_table_id) %>
    next:
      - when: '{{ succeeded() }}'
        do:
          - create_route_igw
  create_route_igw:
    action: aws_boto3.boto3action
    join: all
    input:
      service: ec2
      action_name: create_route
      region: <% ctx().region %>
      params: <% dict(RouteTableId => ctx().route_table_id, GatewayId => ctx().igw_id, DestinationCidrBlock => '0.0.0.0/0') %>
